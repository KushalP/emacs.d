* Config helpers
** ensure-installed

   This function installs a package if it isn't already installed.

#+begin_src emacs-lisp
  (defun ensure-installed (p)
    (when (not (package-installed-p p))
      (package-install p)))
#+end_src

** diminish

   A package to manage how modes appear in the modeline (and, in
   particular, hide boring minor modes we don't care about).  See
   [[magit]] for an example of use.

#+begin_src emacs-lisp
  (ensure-installed 'diminish)
#+end_src

** an easy way to check if we're on OS X

#+begin_src emacs-lisp
(defun osxp ()
  (string= "darwin" system-type))
#+end_src

* Commands
** sudo-edit

  Stolen from the emacs-starter-kit. An easy way to edit files within emacs that require sudo permissions.

#+begin_src emacs-lisp
  (defun sudo-edit (&optional arg)
    (interactive "p")
    (if (or arg (not buffer-file-name))
      (find-file (concat "/sudo:root@localhost:" (ido-read-file-name "File: ")))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+end_src

* Global settings
** better-defaults
  [[https://github.com/technomancy/better-defaults][better-defaults]] does a bunch of generic emacs interface tidying,
  including:
  - better buffer unique names
  - turn off scrollbar, menu bar, toolbar

  It does all its work in autoloads, so you don't need to require it;
  being installed is enough.
#+begin_src emacs-lisp
  (ensure-installed 'better-defaults)
#+end_src

** ido

  ido-ubiquitous enables ido in many places.  (better-defaults already
  enables ido for some things, this just goes further).  smex adds
  ido-like behaviour to =M-x=.
#+begin_src emacs-lisp
  (ensure-installed 'ido-ubiquitous)
  (ido-mode t)
  (ido-ubiquitous-mode t)

  (ensure-installed 'smex)
  (require 'smex)
  (setq smex-save-file (concat user-emacs-directory ".smex-items"))
  (smex-initialize)
  (global-set-key (kbd "M-x") 'smex)
#+end_src

** magit

   [[https://github.com/magit/magit][magit]] is the only way to interact with git.  Seriously, even when
   I'm using other editors, I'll keep emacs open in order to use magit.
   The main reasons I like it:

   - easy manipulation of individual lines within a changeset
   - one-character commands for all common operations (push, pull,
     commit, rebase, merge..)

   As a result, I bind a global key combination to =magit-status= so
   it's always easy to get to.

#+begin_src emacs-lisp
  (ensure-installed 'magit)
  (global-set-key "\C-cg" 'magit-status)
#+end_src

  Stop asking which branch to push follow and follow whatever
  the global =git= config has been set to do.

#+begin_src emacs-lisp
  (setq magit-push-always-verify nil)
#+end_src

   Some cosmetics for magit diffing.

#+begin_src emacs-lisp
  (eval-after-load 'magit
    '(progn
       (set-face-foreground 'magit-diff-add "green4")
       (set-face-foreground 'magit-diff-del "red3")
       (setq magit-last-seen-setup-instructions "1.4.0")))
#+end_src

** y-or-n-p

   This replaces dialogs which require a full "yes" or "no" to just
   require a simple "y" or "n".

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** remap windows key ("super") to meta

   On non-OS/X operating systems, I want the windows key on the
   keyboard to be another meta key.

#+begin_src emacs-lisp
  (when (string-equal system-type "gnu/linux")
    (setq x-super-keysym 'meta))
#+end_src

** turn on auto-fill

   This will word wrap plain text as we edit it.

#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
#+end_src

** use the same PATH as my shell

   When starting up Emacs, use the same =$PATH= as what I use for my
   own commands. That way I know the binaries I want to use are
   present.

#+begin_src emacs-lisp
  (ensure-installed 'exec-path-from-shell)
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))
#+end_src
