* Config helpers
** ensure-installed

   This function installs a package if it isn't already installed.

#+begin_src emacs-lisp
  (defun ensure-installed (p)
    (when (not (package-installed-p p))
      (package-install p)))
#+end_src

** use-package

#+begin_src emacs-lisp
  (ensure-installed 'use-package)
  (require 'use-package)
#+end_src

** diminish

   A package to manage how modes appear in the modeline (and, in
   particular, hide boring minor modes we don't care about).  See
   [[magit]] for an example of use.

#+begin_src emacs-lisp
  (use-package diminish
    :ensure t)
#+end_src

** an easy way to check if we're on OS X

#+begin_src emacs-lisp
(defun osxp ()
  (string= "darwin" system-type))
#+end_src

* Commands
** sudo-edit

  Stolen from the emacs-starter-kit. An easy way to edit files within emacs that require sudo permissions.

#+begin_src emacs-lisp
  (defun sudo-edit (&optional arg)
    (interactive "p")
    (if (or arg (not buffer-file-name))
      (find-file (concat "/sudo:root@localhost:" (read-file-name "File: ")))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+end_src

* Global settings
** better-defaults
  [[https://github.com/technomancy/better-defaults][better-defaults]] does a bunch of generic emacs interface tidying,
  including:
  - better buffer unique names
  - turn off scrollbar, menu bar, toolbar

  It does all its work in autoloads, so you don't need to require it;
  being installed is enough.

#+begin_src emacs-lisp
  (use-package better-defaults
    :ensure t)
#+end_src
** helm

#+begin_src emacs-lisp
(use-package helm-config
  :config
  (progn
    (helm-mode 1)
    (helm-adaptive-mode 1)
    (helm-push-mark-mode 1)))

(use-package helm
  :ensure t
  :defer t
  :bind (("M-x" . helm-M-x)
         ("M-y" . helm-show-kill-ring)
         ("C-c f" . helm-recentf)
         ("C-x C-f" . helm-find-files)
         ("M-g a" . helm-do-grep-ag))
  :config
  (set-face-attribute 'helm-source-header nil :height 0.1)
  (setq helm-M-x-fuzzy-match t
        helm-buffers-fuzzy-matching t
        helm-display-header-line nil
        helm-locate-fuzzy-match t
        helm-recentf-fuzzy-match    t
        helm-split-window-in-side-p t)
  (require 'helm-config)
  (helm-mode 1)
  (helm-autoresize-mode 1))

(use-package helm-ag
  :ensure t)

(use-package helm-ls-git
  :ensure t
  :bind (("C-x C-g" . helm-ls-git-ls)))
#+end_src

** magit

   [[https://github.com/magit/magit][magit]] is the only way to interact with git.  Seriously, even when
   I'm using other editors, I'll keep emacs open in order to use magit.
   The main reasons I like it:

   - easy manipulation of individual lines within a changeset
   - one-character commands for all common operations (push, pull,
     commit, rebase, merge..)

   As a result, I bind a global key combination to =magit-status= so
   it's always easy to get to.

#+begin_src emacs-lisp
  (use-package magit
    :ensure t)

  (global-set-key "\C-cg" 'magit-status)
#+end_src

  Stop asking which branch to push follow and follow whatever
  the global =git= config has been set to do.

#+begin_src emacs-lisp
  (setq magit-push-always-verify nil)
#+end_src

** y-or-n-p

   This replaces dialogs which require a full "yes" or "no" to just
   require a simple "y" or "n".

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** remap windows key ("super") to meta

   On non-OS/X operating systems, I want the windows key on the
   keyboard to be another meta key.

#+begin_src emacs-lisp
  (when (string-equal system-type "gnu/linux")
    (setq x-super-keysym 'meta))
#+end_src

** turn on auto-fill

   This will word wrap plain text as we edit it.

#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
#+end_src

** use the same PATH as my shell

   When starting up Emacs, use the same =$PATH= as what I use for my
   own commands. That way I know the binaries I want to use are
   present.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t)

  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))
#+end_src
** multiple-cursors

   To make it easier to work with multiple lines.

#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t)

  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
#+end_src
** after-load

   Define a convenient macro that wraps typical =eval-after-load= in
   such a way that we donâ€™t need to use =progn= to contain the callback
   logic. This macro was grabbed from:
   https://github.com/purcell/emacs.d/blob/aa789c9745b13612c4fea6e638d81d8ebbfecdf8/init-utils.el#L1-L5

#+begin_src emacs-lisp
(defmacro after-load (feature &rest body)
  "After FEATURE is loaded, evaluate BODY."
  (declare (indent defun))
  `(eval-after-load ,feature
     '(progn ,@body)))
#+end_src

** flycheck

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :init (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
#+end_src
