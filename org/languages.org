* Programming Languages
** C#

#+begin_src emacs-lisp
  (use-package csharp-mode
    :ensure t)
#+end_src

** Docker

#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :ensure t)
#+end_src

** Elixir

#+begin_src emacs-lisp
  (use-package elixir-mode
    :ensure t)
#+end_src

** Elm

#+begin_src emacs-lisp
  (use-package elm-mode
    :ensure t)
#+end_src

** Go

   - Set the tab-width to four spaces
   - Automatically format Go source using =gofmt=

#+begin_src emacs-lisp
  (use-package go-mode
    :ensure t
    :init '(progn
            (setq-default tab-width 4)
            (add-hook 'before-save-hook 'gofmt-before-save)))

  (after-load 'go-mode
    (after-load 'flycheck
      (add-hook 'go-mode-hook 'flycheck-mode-on-safe)))
#+end_src

** Haskell

#+begin_src emacs-lisp
  (use-package haskell-mode
    :ensure t
    :init '(progn
            (add-hook 'haskell-mode-hook #'turn-on-haskell-indentation)
            (add-hook 'haskell-mode-hook #'interactive-haskell-mode)))
#+end_src

** Idris

#+begin_src emacs-lisp
  (use-package idris-mode
    :ensure t)
#+end_src

** JavaScript

#+begin_src emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode ("\\.js\\'" . js2-mode)
    :config (setq-default js2-basic-offset 2))
#+end_src

** Lisps
*** Clojure

   [[https://github.com/clojure-emacs/cider][cider]] is a package for live-coding Clojure by interacting with a
   Clojure nREPL instance.  [[https://github.com/clojure-emacs/clojure-mode][clojure-mode]] is the major mode for editing
   clojure code.

#+begin_src emacs-lisp
  (use-package cider
    :ensure t)
  (use-package clojure-mode
    :ensure t)
#+end_src

*** Paredit

   Paredit is a minor mode for enforcing balanced parentheses and
   providing operations on sets of parentheses -- generally "slurp"
   and "barf" to swallow or remove terms at the right-hand side of a
   paren pair.  Naturally, this is a good fit for lisps.

#+begin_src emacs-lisp
  (use-package paredit
    :ensure t
    :init '(progn
            (add-hook 'clojure-mode-hook #'enable-paredit-mode)
            (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
            (add-hook 'scheme-mode-hook #'enable-paredit-mode)))
#+end_src

*** Pretty lambdas

   Font-lock stuff to display character sequences such as =lambda= as
   unicode chars such as λ.

   First, we define the font-lock function to detect the appropriate
   sequence and what to replace it with:

#+begin_src emacs-lisp
  (defun pretty-lambdas ()
    (font-lock-add-keywords
     nil `(("\\(\\<lambda\\>\\)"
            (0 (progn (compose-region (match-beginning 1) (match-end 1)
                                      ,(string-to-char "λ"))
                      nil))))))
#+end_src

   Then we add it to some lisp modes:

#+begin_src emacs-lisp
  (add-hook 'clojure-mode-hook #'pretty-lambdas)
  (add-hook 'scheme-mode-hook #'pretty-lambdas)
#+end_src

** Markdown

#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t)
#+end_src

** Nginx

#+begin_src emacs-lisp
  (use-package nginx-mode
    :ensure t)
#+end_src

** Puppet

  [[https://docs.puppetlabs.com/puppet/][Puppet]] is a configuration management language.  First, we want the
  major mode for editing puppet code:

#+begin_src emacs-lisp
  (use-package puppet-mode
    :ensure t)
#+end_src

** Python

#+begin_src emacs-lisp
  (use-package elpy
    :ensure t
    :init (elpy-enable))

  (use-package py-autopep8
    :ensure t
    :init (add-hook 'python-mode-hook 'py-autopep8-enable-on-save))
#+end_src

** Ruby

   Don't add the coding system headers to files.

#+begin_src emacs-lisp
  (setq ruby-insert-encoding-magic-comment nil)
#+end_src

** Rust

#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t)
  (use-package rustfmt
    :ensure t)
#+end_src

** SCSS

   Install the SCSS mode, but turn off auto compilation.

#+begin_src emacs-lisp
  (use-package scss-mode
    :ensure t
    :init '(progn
            (setq scss-compile-at-save nil)))
#+end_src

** TOML

   There are a few things that use TOML config files. Like [[https://hekad.readthedocs.org/][heka]].

#+begin_src emacs-lisp
  (use-package toml-mode
    :ensure t)
#+end_src

** YAML

   We'll probably be editing YAML config files. Especially for Puppet
   installs that use it for hieradata.

#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :init (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode)))
#+end_src
